// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dtekcth/dtek-api/ent/lunchmenu"
	"github.com/dtekcth/dtek-api/ent/lunchmenuitem"
	"github.com/dtekcth/dtek-api/model"
)

// LunchMenuItemCreate is the builder for creating a LunchMenuItem entity.
type LunchMenuItemCreate struct {
	config
	mutation *LunchMenuItemMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (lmic *LunchMenuItemCreate) SetTitle(s string) *LunchMenuItemCreate {
	lmic.mutation.SetTitle(s)
	return lmic
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (lmic *LunchMenuItemCreate) SetNillableTitle(s *string) *LunchMenuItemCreate {
	if s != nil {
		lmic.SetTitle(*s)
	}
	return lmic
}

// SetBody sets the "body" field.
func (lmic *LunchMenuItemCreate) SetBody(s string) *LunchMenuItemCreate {
	lmic.mutation.SetBody(s)
	return lmic
}

// SetLanguage sets the "language" field.
func (lmic *LunchMenuItemCreate) SetLanguage(l lunchmenuitem.Language) *LunchMenuItemCreate {
	lmic.mutation.SetLanguage(l)
	return lmic
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (lmic *LunchMenuItemCreate) SetNillableLanguage(l *lunchmenuitem.Language) *LunchMenuItemCreate {
	if l != nil {
		lmic.SetLanguage(*l)
	}
	return lmic
}

// SetPreformatted sets the "preformatted" field.
func (lmic *LunchMenuItemCreate) SetPreformatted(b bool) *LunchMenuItemCreate {
	lmic.mutation.SetPreformatted(b)
	return lmic
}

// SetNillablePreformatted sets the "preformatted" field if the given value is not nil.
func (lmic *LunchMenuItemCreate) SetNillablePreformatted(b *bool) *LunchMenuItemCreate {
	if b != nil {
		lmic.SetPreformatted(*b)
	}
	return lmic
}

// SetAllergens sets the "allergens" field.
func (lmic *LunchMenuItemCreate) SetAllergens(m []model.Allergen) *LunchMenuItemCreate {
	lmic.mutation.SetAllergens(m)
	return lmic
}

// SetEmission sets the "emission" field.
func (lmic *LunchMenuItemCreate) SetEmission(f float64) *LunchMenuItemCreate {
	lmic.mutation.SetEmission(f)
	return lmic
}

// SetNillableEmission sets the "emission" field if the given value is not nil.
func (lmic *LunchMenuItemCreate) SetNillableEmission(f *float64) *LunchMenuItemCreate {
	if f != nil {
		lmic.SetEmission(*f)
	}
	return lmic
}

// SetPrice sets the "price" field.
func (lmic *LunchMenuItemCreate) SetPrice(s string) *LunchMenuItemCreate {
	lmic.mutation.SetPrice(s)
	return lmic
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (lmic *LunchMenuItemCreate) SetNillablePrice(s *string) *LunchMenuItemCreate {
	if s != nil {
		lmic.SetPrice(*s)
	}
	return lmic
}

// SetMenuID sets the "menu" edge to the LunchMenu entity by ID.
func (lmic *LunchMenuItemCreate) SetMenuID(id int) *LunchMenuItemCreate {
	lmic.mutation.SetMenuID(id)
	return lmic
}

// SetMenu sets the "menu" edge to the LunchMenu entity.
func (lmic *LunchMenuItemCreate) SetMenu(l *LunchMenu) *LunchMenuItemCreate {
	return lmic.SetMenuID(l.ID)
}

// Mutation returns the LunchMenuItemMutation object of the builder.
func (lmic *LunchMenuItemCreate) Mutation() *LunchMenuItemMutation {
	return lmic.mutation
}

// Save creates the LunchMenuItem in the database.
func (lmic *LunchMenuItemCreate) Save(ctx context.Context) (*LunchMenuItem, error) {
	var (
		err  error
		node *LunchMenuItem
	)
	lmic.defaults()
	if len(lmic.hooks) == 0 {
		if err = lmic.check(); err != nil {
			return nil, err
		}
		node, err = lmic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LunchMenuItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lmic.check(); err != nil {
				return nil, err
			}
			lmic.mutation = mutation
			if node, err = lmic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(lmic.hooks) - 1; i >= 0; i-- {
			if lmic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lmic.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, lmic.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*LunchMenuItem)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from LunchMenuItemMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (lmic *LunchMenuItemCreate) SaveX(ctx context.Context) *LunchMenuItem {
	v, err := lmic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lmic *LunchMenuItemCreate) Exec(ctx context.Context) error {
	_, err := lmic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lmic *LunchMenuItemCreate) ExecX(ctx context.Context) {
	if err := lmic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lmic *LunchMenuItemCreate) defaults() {
	if _, ok := lmic.mutation.Preformatted(); !ok {
		v := lunchmenuitem.DefaultPreformatted
		lmic.mutation.SetPreformatted(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lmic *LunchMenuItemCreate) check() error {
	if _, ok := lmic.mutation.Body(); !ok {
		return &ValidationError{Name: "body", err: errors.New(`ent: missing required field "LunchMenuItem.body"`)}
	}
	if v, ok := lmic.mutation.Language(); ok {
		if err := lunchmenuitem.LanguageValidator(v); err != nil {
			return &ValidationError{Name: "language", err: fmt.Errorf(`ent: validator failed for field "LunchMenuItem.language": %w`, err)}
		}
	}
	if _, ok := lmic.mutation.Preformatted(); !ok {
		return &ValidationError{Name: "preformatted", err: errors.New(`ent: missing required field "LunchMenuItem.preformatted"`)}
	}
	if _, ok := lmic.mutation.MenuID(); !ok {
		return &ValidationError{Name: "menu", err: errors.New(`ent: missing required edge "LunchMenuItem.menu"`)}
	}
	return nil
}

func (lmic *LunchMenuItemCreate) sqlSave(ctx context.Context) (*LunchMenuItem, error) {
	_node, _spec := lmic.createSpec()
	if err := sqlgraph.CreateNode(ctx, lmic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (lmic *LunchMenuItemCreate) createSpec() (*LunchMenuItem, *sqlgraph.CreateSpec) {
	var (
		_node = &LunchMenuItem{config: lmic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: lunchmenuitem.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: lunchmenuitem.FieldID,
			},
		}
	)
	if value, ok := lmic.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: lunchmenuitem.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := lmic.mutation.Body(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: lunchmenuitem.FieldBody,
		})
		_node.Body = value
	}
	if value, ok := lmic.mutation.Language(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: lunchmenuitem.FieldLanguage,
		})
		_node.Language = value
	}
	if value, ok := lmic.mutation.Preformatted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: lunchmenuitem.FieldPreformatted,
		})
		_node.Preformatted = value
	}
	if value, ok := lmic.mutation.Allergens(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: lunchmenuitem.FieldAllergens,
		})
		_node.Allergens = value
	}
	if value, ok := lmic.mutation.Emission(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: lunchmenuitem.FieldEmission,
		})
		_node.Emission = value
	}
	if value, ok := lmic.mutation.Price(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: lunchmenuitem.FieldPrice,
		})
		_node.Price = value
	}
	if nodes := lmic.mutation.MenuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lunchmenuitem.MenuTable,
			Columns: []string{lunchmenuitem.MenuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lunchmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.lunch_menu_items = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LunchMenuItemCreateBulk is the builder for creating many LunchMenuItem entities in bulk.
type LunchMenuItemCreateBulk struct {
	config
	builders []*LunchMenuItemCreate
}

// Save creates the LunchMenuItem entities in the database.
func (lmicb *LunchMenuItemCreateBulk) Save(ctx context.Context) ([]*LunchMenuItem, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lmicb.builders))
	nodes := make([]*LunchMenuItem, len(lmicb.builders))
	mutators := make([]Mutator, len(lmicb.builders))
	for i := range lmicb.builders {
		func(i int, root context.Context) {
			builder := lmicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LunchMenuItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lmicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lmicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lmicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lmicb *LunchMenuItemCreateBulk) SaveX(ctx context.Context) []*LunchMenuItem {
	v, err := lmicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lmicb *LunchMenuItemCreateBulk) Exec(ctx context.Context) error {
	_, err := lmicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lmicb *LunchMenuItemCreateBulk) ExecX(ctx context.Context) {
	if err := lmicb.Exec(ctx); err != nil {
		panic(err)
	}
}
