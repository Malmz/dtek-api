// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dtekcth/dtek-api/ent/lunchmenu"
	"github.com/dtekcth/dtek-api/ent/predicate"
	"github.com/dtekcth/dtek-api/ent/resturant"
)

// ResturantUpdate is the builder for updating Resturant entities.
type ResturantUpdate struct {
	config
	hooks    []Hook
	mutation *ResturantMutation
}

// Where appends a list predicates to the ResturantUpdate builder.
func (ru *ResturantUpdate) Where(ps ...predicate.Resturant) *ResturantUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetSlug sets the "slug" field.
func (ru *ResturantUpdate) SetSlug(s string) *ResturantUpdate {
	ru.mutation.SetSlug(s)
	return ru
}

// SetName sets the "name" field.
func (ru *ResturantUpdate) SetName(s string) *ResturantUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetCampus sets the "campus" field.
func (ru *ResturantUpdate) SetCampus(r resturant.Campus) *ResturantUpdate {
	ru.mutation.SetCampus(r)
	return ru
}

// AddMenuIDs adds the "menu" edge to the LunchMenu entity by IDs.
func (ru *ResturantUpdate) AddMenuIDs(ids ...int) *ResturantUpdate {
	ru.mutation.AddMenuIDs(ids...)
	return ru
}

// AddMenu adds the "menu" edges to the LunchMenu entity.
func (ru *ResturantUpdate) AddMenu(l ...*LunchMenu) *ResturantUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ru.AddMenuIDs(ids...)
}

// Mutation returns the ResturantMutation object of the builder.
func (ru *ResturantUpdate) Mutation() *ResturantMutation {
	return ru.mutation
}

// ClearMenu clears all "menu" edges to the LunchMenu entity.
func (ru *ResturantUpdate) ClearMenu() *ResturantUpdate {
	ru.mutation.ClearMenu()
	return ru
}

// RemoveMenuIDs removes the "menu" edge to LunchMenu entities by IDs.
func (ru *ResturantUpdate) RemoveMenuIDs(ids ...int) *ResturantUpdate {
	ru.mutation.RemoveMenuIDs(ids...)
	return ru
}

// RemoveMenu removes "menu" edges to LunchMenu entities.
func (ru *ResturantUpdate) RemoveMenu(l ...*LunchMenu) *ResturantUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ru.RemoveMenuIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ResturantUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		if err = ru.check(); err != nil {
			return 0, err
		}
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResturantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ru.check(); err != nil {
				return 0, err
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			if ru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ResturantUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ResturantUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ResturantUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *ResturantUpdate) check() error {
	if v, ok := ru.mutation.Campus(); ok {
		if err := resturant.CampusValidator(v); err != nil {
			return &ValidationError{Name: "campus", err: fmt.Errorf(`ent: validator failed for field "Resturant.campus": %w`, err)}
		}
	}
	return nil
}

func (ru *ResturantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resturant.Table,
			Columns: resturant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resturant.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Slug(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resturant.FieldSlug,
		})
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resturant.FieldName,
		})
	}
	if value, ok := ru.mutation.Campus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: resturant.FieldCampus,
		})
	}
	if ru.mutation.MenuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resturant.MenuTable,
			Columns: []string{resturant.MenuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lunchmenu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedMenuIDs(); len(nodes) > 0 && !ru.mutation.MenuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resturant.MenuTable,
			Columns: []string{resturant.MenuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lunchmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.MenuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resturant.MenuTable,
			Columns: []string{resturant.MenuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lunchmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resturant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ResturantUpdateOne is the builder for updating a single Resturant entity.
type ResturantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ResturantMutation
}

// SetSlug sets the "slug" field.
func (ruo *ResturantUpdateOne) SetSlug(s string) *ResturantUpdateOne {
	ruo.mutation.SetSlug(s)
	return ruo
}

// SetName sets the "name" field.
func (ruo *ResturantUpdateOne) SetName(s string) *ResturantUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetCampus sets the "campus" field.
func (ruo *ResturantUpdateOne) SetCampus(r resturant.Campus) *ResturantUpdateOne {
	ruo.mutation.SetCampus(r)
	return ruo
}

// AddMenuIDs adds the "menu" edge to the LunchMenu entity by IDs.
func (ruo *ResturantUpdateOne) AddMenuIDs(ids ...int) *ResturantUpdateOne {
	ruo.mutation.AddMenuIDs(ids...)
	return ruo
}

// AddMenu adds the "menu" edges to the LunchMenu entity.
func (ruo *ResturantUpdateOne) AddMenu(l ...*LunchMenu) *ResturantUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ruo.AddMenuIDs(ids...)
}

// Mutation returns the ResturantMutation object of the builder.
func (ruo *ResturantUpdateOne) Mutation() *ResturantMutation {
	return ruo.mutation
}

// ClearMenu clears all "menu" edges to the LunchMenu entity.
func (ruo *ResturantUpdateOne) ClearMenu() *ResturantUpdateOne {
	ruo.mutation.ClearMenu()
	return ruo
}

// RemoveMenuIDs removes the "menu" edge to LunchMenu entities by IDs.
func (ruo *ResturantUpdateOne) RemoveMenuIDs(ids ...int) *ResturantUpdateOne {
	ruo.mutation.RemoveMenuIDs(ids...)
	return ruo
}

// RemoveMenu removes "menu" edges to LunchMenu entities.
func (ruo *ResturantUpdateOne) RemoveMenu(l ...*LunchMenu) *ResturantUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ruo.RemoveMenuIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ResturantUpdateOne) Select(field string, fields ...string) *ResturantUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Resturant entity.
func (ruo *ResturantUpdateOne) Save(ctx context.Context) (*Resturant, error) {
	var (
		err  error
		node *Resturant
	)
	if len(ruo.hooks) == 0 {
		if err = ruo.check(); err != nil {
			return nil, err
		}
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResturantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ruo.check(); err != nil {
				return nil, err
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			if ruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Resturant)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ResturantMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ResturantUpdateOne) SaveX(ctx context.Context) *Resturant {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ResturantUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ResturantUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *ResturantUpdateOne) check() error {
	if v, ok := ruo.mutation.Campus(); ok {
		if err := resturant.CampusValidator(v); err != nil {
			return &ValidationError{Name: "campus", err: fmt.Errorf(`ent: validator failed for field "Resturant.campus": %w`, err)}
		}
	}
	return nil
}

func (ruo *ResturantUpdateOne) sqlSave(ctx context.Context) (_node *Resturant, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resturant.Table,
			Columns: resturant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: resturant.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Resturant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, resturant.FieldID)
		for _, f := range fields {
			if !resturant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != resturant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Slug(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resturant.FieldSlug,
		})
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resturant.FieldName,
		})
	}
	if value, ok := ruo.mutation.Campus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: resturant.FieldCampus,
		})
	}
	if ruo.mutation.MenuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resturant.MenuTable,
			Columns: []string{resturant.MenuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lunchmenu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedMenuIDs(); len(nodes) > 0 && !ruo.mutation.MenuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resturant.MenuTable,
			Columns: []string{resturant.MenuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lunchmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.MenuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   resturant.MenuTable,
			Columns: []string{resturant.MenuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lunchmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Resturant{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resturant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
