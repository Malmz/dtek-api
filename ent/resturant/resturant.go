// Code generated by ent, DO NOT EDIT.

package resturant

import (
	"fmt"
)

const (
	// Label holds the string label denoting the resturant type in the database.
	Label = "resturant"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCampus holds the string denoting the campus field in the database.
	FieldCampus = "campus"
	// EdgeMenu holds the string denoting the menu edge name in mutations.
	EdgeMenu = "menu"
	// Table holds the table name of the resturant in the database.
	Table = "resturants"
	// MenuTable is the table that holds the menu relation/edge.
	MenuTable = "lunch_menus"
	// MenuInverseTable is the table name for the LunchMenu entity.
	// It exists in this package in order to avoid circular dependency with the "lunchmenu" package.
	MenuInverseTable = "lunch_menus"
	// MenuColumn is the table column denoting the menu relation/edge.
	MenuColumn = "resturant_menu"
)

// Columns holds all SQL columns for resturant fields.
var Columns = []string{
	FieldID,
	FieldSlug,
	FieldName,
	FieldCampus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Campus defines the type for the "campus" enum field.
type Campus string

// Campus values.
const (
	CampusLindholmen  Campus = "lindholmen"
	CampusJohanneberg Campus = "johanneberg"
)

func (c Campus) String() string {
	return string(c)
}

// CampusValidator is a validator for the "campus" field enum values. It is called by the builders before save.
func CampusValidator(c Campus) error {
	switch c {
	case CampusLindholmen, CampusJohanneberg:
		return nil
	default:
		return fmt.Errorf("resturant: invalid enum value for campus field: %q", c)
	}
}
