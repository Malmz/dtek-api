// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/dtekcth/dtek-api/ent/lunchmenu"
	"github.com/dtekcth/dtek-api/model"
)

// LunchMenu is the model entity for the LunchMenu schema.
type LunchMenu struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Resturant holds the value of the "resturant" field.
	Resturant string `json:"resturant,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Language holds the value of the "language" field.
	Language lunchmenu.Language `json:"language,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Menu holds the value of the "menu" field.
	Menu []model.LunchMenuItem `json:"menu,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LunchMenu) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case lunchmenu.FieldMenu:
			values[i] = new([]byte)
		case lunchmenu.FieldID:
			values[i] = new(sql.NullInt64)
		case lunchmenu.FieldResturant, lunchmenu.FieldLanguage, lunchmenu.FieldName:
			values[i] = new(sql.NullString)
		case lunchmenu.FieldUpdateTime, lunchmenu.FieldDate:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type LunchMenu", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LunchMenu fields.
func (lm *LunchMenu) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lunchmenu.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lm.ID = int(value.Int64)
		case lunchmenu.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				lm.UpdateTime = value.Time
			}
		case lunchmenu.FieldResturant:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resturant", values[i])
			} else if value.Valid {
				lm.Resturant = value.String
			}
		case lunchmenu.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				lm.Date = value.Time
			}
		case lunchmenu.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				lm.Language = lunchmenu.Language(value.String)
			}
		case lunchmenu.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				lm.Name = value.String
			}
		case lunchmenu.FieldMenu:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field menu", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &lm.Menu); err != nil {
					return fmt.Errorf("unmarshal field menu: %w", err)
				}
			}
		}
	}
	return nil
}

// Update returns a builder for updating this LunchMenu.
// Note that you need to call LunchMenu.Unwrap() before calling this method if this LunchMenu
// was returned from a transaction, and the transaction was committed or rolled back.
func (lm *LunchMenu) Update() *LunchMenuUpdateOne {
	return (&LunchMenuClient{config: lm.config}).UpdateOne(lm)
}

// Unwrap unwraps the LunchMenu entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lm *LunchMenu) Unwrap() *LunchMenu {
	_tx, ok := lm.config.driver.(*txDriver)
	if !ok {
		panic("ent: LunchMenu is not a transactional entity")
	}
	lm.config.driver = _tx.drv
	return lm
}

// String implements the fmt.Stringer.
func (lm *LunchMenu) String() string {
	var builder strings.Builder
	builder.WriteString("LunchMenu(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lm.ID))
	builder.WriteString("update_time=")
	builder.WriteString(lm.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("resturant=")
	builder.WriteString(lm.Resturant)
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(lm.Date.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("language=")
	builder.WriteString(fmt.Sprintf("%v", lm.Language))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(lm.Name)
	builder.WriteString(", ")
	builder.WriteString("menu=")
	builder.WriteString(fmt.Sprintf("%v", lm.Menu))
	builder.WriteByte(')')
	return builder.String()
}

// LunchMenus is a parsable slice of LunchMenu.
type LunchMenus []*LunchMenu

func (lm LunchMenus) config(cfg config) {
	for _i := range lm {
		lm[_i].config = cfg
	}
}
