// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/dtekcth/dtek-api/ent/lunchmenu"
	"github.com/dtekcth/dtek-api/ent/resturant"
)

// LunchMenu is the model entity for the LunchMenu schema.
type LunchMenu struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LunchMenuQuery when eager-loading is set.
	Edges          LunchMenuEdges `json:"edges"`
	resturant_menu *int
}

// LunchMenuEdges holds the relations/edges for other nodes in the graph.
type LunchMenuEdges struct {
	// Items holds the value of the items edge.
	Items []*LunchMenuItem `json:"items,omitempty"`
	// Resturant holds the value of the resturant edge.
	Resturant *Resturant `json:"resturant,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ItemsOrErr returns the Items value or an error if the edge
// was not loaded in eager-loading.
func (e LunchMenuEdges) ItemsOrErr() ([]*LunchMenuItem, error) {
	if e.loadedTypes[0] {
		return e.Items, nil
	}
	return nil, &NotLoadedError{edge: "items"}
}

// ResturantOrErr returns the Resturant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LunchMenuEdges) ResturantOrErr() (*Resturant, error) {
	if e.loadedTypes[1] {
		if e.Resturant == nil {
			// The edge resturant was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: resturant.Label}
		}
		return e.Resturant, nil
	}
	return nil, &NotLoadedError{edge: "resturant"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LunchMenu) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case lunchmenu.FieldID:
			values[i] = new(sql.NullInt64)
		case lunchmenu.FieldDate:
			values[i] = new(sql.NullTime)
		case lunchmenu.ForeignKeys[0]: // resturant_menu
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type LunchMenu", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LunchMenu fields.
func (lm *LunchMenu) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lunchmenu.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lm.ID = int(value.Int64)
		case lunchmenu.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				lm.Date = value.Time
			}
		case lunchmenu.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field resturant_menu", value)
			} else if value.Valid {
				lm.resturant_menu = new(int)
				*lm.resturant_menu = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryItems queries the "items" edge of the LunchMenu entity.
func (lm *LunchMenu) QueryItems() *LunchMenuItemQuery {
	return (&LunchMenuClient{config: lm.config}).QueryItems(lm)
}

// QueryResturant queries the "resturant" edge of the LunchMenu entity.
func (lm *LunchMenu) QueryResturant() *ResturantQuery {
	return (&LunchMenuClient{config: lm.config}).QueryResturant(lm)
}

// Update returns a builder for updating this LunchMenu.
// Note that you need to call LunchMenu.Unwrap() before calling this method if this LunchMenu
// was returned from a transaction, and the transaction was committed or rolled back.
func (lm *LunchMenu) Update() *LunchMenuUpdateOne {
	return (&LunchMenuClient{config: lm.config}).UpdateOne(lm)
}

// Unwrap unwraps the LunchMenu entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lm *LunchMenu) Unwrap() *LunchMenu {
	_tx, ok := lm.config.driver.(*txDriver)
	if !ok {
		panic("ent: LunchMenu is not a transactional entity")
	}
	lm.config.driver = _tx.drv
	return lm
}

// String implements the fmt.Stringer.
func (lm *LunchMenu) String() string {
	var builder strings.Builder
	builder.WriteString("LunchMenu(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lm.ID))
	builder.WriteString("date=")
	builder.WriteString(lm.Date.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// LunchMenus is a parsable slice of LunchMenu.
type LunchMenus []*LunchMenu

func (lm LunchMenus) config(cfg config) {
	for _i := range lm {
		lm[_i].config = cfg
	}
}
