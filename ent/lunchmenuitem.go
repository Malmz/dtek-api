// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/dtekcth/dtek-api/ent/lunchmenu"
	"github.com/dtekcth/dtek-api/ent/lunchmenuitem"
	"github.com/dtekcth/dtek-api/model"
)

// LunchMenuItem is the model entity for the LunchMenuItem schema.
type LunchMenuItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Body holds the value of the "body" field.
	Body string `json:"body,omitempty"`
	// Language holds the value of the "language" field.
	Language lunchmenuitem.Language `json:"language,omitempty"`
	// Preformatted holds the value of the "preformatted" field.
	Preformatted bool `json:"preformatted,omitempty"`
	// Allergens holds the value of the "allergens" field.
	Allergens []model.Allergen `json:"allergens,omitempty"`
	// Emission holds the value of the "emission" field.
	Emission float64 `json:"emission,omitempty"`
	// Price holds the value of the "price" field.
	Price string `json:"price,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LunchMenuItemQuery when eager-loading is set.
	Edges            LunchMenuItemEdges `json:"edges"`
	lunch_menu_items *int
}

// LunchMenuItemEdges holds the relations/edges for other nodes in the graph.
type LunchMenuItemEdges struct {
	// Menu holds the value of the menu edge.
	Menu *LunchMenu `json:"menu,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MenuOrErr returns the Menu value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e LunchMenuItemEdges) MenuOrErr() (*LunchMenu, error) {
	if e.loadedTypes[0] {
		if e.Menu == nil {
			// The edge menu was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: lunchmenu.Label}
		}
		return e.Menu, nil
	}
	return nil, &NotLoadedError{edge: "menu"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LunchMenuItem) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case lunchmenuitem.FieldAllergens:
			values[i] = new([]byte)
		case lunchmenuitem.FieldPreformatted:
			values[i] = new(sql.NullBool)
		case lunchmenuitem.FieldEmission:
			values[i] = new(sql.NullFloat64)
		case lunchmenuitem.FieldID:
			values[i] = new(sql.NullInt64)
		case lunchmenuitem.FieldTitle, lunchmenuitem.FieldBody, lunchmenuitem.FieldLanguage, lunchmenuitem.FieldPrice:
			values[i] = new(sql.NullString)
		case lunchmenuitem.ForeignKeys[0]: // lunch_menu_items
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type LunchMenuItem", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LunchMenuItem fields.
func (lmi *LunchMenuItem) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case lunchmenuitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lmi.ID = int(value.Int64)
		case lunchmenuitem.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				lmi.Title = value.String
			}
		case lunchmenuitem.FieldBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value.Valid {
				lmi.Body = value.String
			}
		case lunchmenuitem.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				lmi.Language = lunchmenuitem.Language(value.String)
			}
		case lunchmenuitem.FieldPreformatted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field preformatted", values[i])
			} else if value.Valid {
				lmi.Preformatted = value.Bool
			}
		case lunchmenuitem.FieldAllergens:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field allergens", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &lmi.Allergens); err != nil {
					return fmt.Errorf("unmarshal field allergens: %w", err)
				}
			}
		case lunchmenuitem.FieldEmission:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field emission", values[i])
			} else if value.Valid {
				lmi.Emission = value.Float64
			}
		case lunchmenuitem.FieldPrice:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				lmi.Price = value.String
			}
		case lunchmenuitem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field lunch_menu_items", value)
			} else if value.Valid {
				lmi.lunch_menu_items = new(int)
				*lmi.lunch_menu_items = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryMenu queries the "menu" edge of the LunchMenuItem entity.
func (lmi *LunchMenuItem) QueryMenu() *LunchMenuQuery {
	return (&LunchMenuItemClient{config: lmi.config}).QueryMenu(lmi)
}

// Update returns a builder for updating this LunchMenuItem.
// Note that you need to call LunchMenuItem.Unwrap() before calling this method if this LunchMenuItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (lmi *LunchMenuItem) Update() *LunchMenuItemUpdateOne {
	return (&LunchMenuItemClient{config: lmi.config}).UpdateOne(lmi)
}

// Unwrap unwraps the LunchMenuItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lmi *LunchMenuItem) Unwrap() *LunchMenuItem {
	_tx, ok := lmi.config.driver.(*txDriver)
	if !ok {
		panic("ent: LunchMenuItem is not a transactional entity")
	}
	lmi.config.driver = _tx.drv
	return lmi
}

// String implements the fmt.Stringer.
func (lmi *LunchMenuItem) String() string {
	var builder strings.Builder
	builder.WriteString("LunchMenuItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lmi.ID))
	builder.WriteString("title=")
	builder.WriteString(lmi.Title)
	builder.WriteString(", ")
	builder.WriteString("body=")
	builder.WriteString(lmi.Body)
	builder.WriteString(", ")
	builder.WriteString("language=")
	builder.WriteString(fmt.Sprintf("%v", lmi.Language))
	builder.WriteString(", ")
	builder.WriteString("preformatted=")
	builder.WriteString(fmt.Sprintf("%v", lmi.Preformatted))
	builder.WriteString(", ")
	builder.WriteString("allergens=")
	builder.WriteString(fmt.Sprintf("%v", lmi.Allergens))
	builder.WriteString(", ")
	builder.WriteString("emission=")
	builder.WriteString(fmt.Sprintf("%v", lmi.Emission))
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(lmi.Price)
	builder.WriteByte(')')
	return builder.String()
}

// LunchMenuItems is a parsable slice of LunchMenuItem.
type LunchMenuItems []*LunchMenuItem

func (lmi LunchMenuItems) config(cfg config) {
	for _i := range lmi {
		lmi[_i].config = cfg
	}
}
