// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/dtekcth/dtek-api/ent/resturant"
)

// Resturant is the model entity for the Resturant schema.
type Resturant struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Campus holds the value of the "campus" field.
	Campus resturant.Campus `json:"campus,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResturantQuery when eager-loading is set.
	Edges ResturantEdges `json:"edges"`
}

// ResturantEdges holds the relations/edges for other nodes in the graph.
type ResturantEdges struct {
	// Menu holds the value of the menu edge.
	Menu []*LunchMenu `json:"menu,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MenuOrErr returns the Menu value or an error if the edge
// was not loaded in eager-loading.
func (e ResturantEdges) MenuOrErr() ([]*LunchMenu, error) {
	if e.loadedTypes[0] {
		return e.Menu, nil
	}
	return nil, &NotLoadedError{edge: "menu"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Resturant) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case resturant.FieldID:
			values[i] = new(sql.NullInt64)
		case resturant.FieldSlug, resturant.FieldName, resturant.FieldCampus:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Resturant", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Resturant fields.
func (r *Resturant) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case resturant.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case resturant.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				r.Slug = value.String
			}
		case resturant.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case resturant.FieldCampus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field campus", values[i])
			} else if value.Valid {
				r.Campus = resturant.Campus(value.String)
			}
		}
	}
	return nil
}

// QueryMenu queries the "menu" edge of the Resturant entity.
func (r *Resturant) QueryMenu() *LunchMenuQuery {
	return (&ResturantClient{config: r.config}).QueryMenu(r)
}

// Update returns a builder for updating this Resturant.
// Note that you need to call Resturant.Unwrap() before calling this method if this Resturant
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Resturant) Update() *ResturantUpdateOne {
	return (&ResturantClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Resturant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Resturant) Unwrap() *Resturant {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Resturant is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Resturant) String() string {
	var builder strings.Builder
	builder.WriteString("Resturant(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("slug=")
	builder.WriteString(r.Slug)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(r.Name)
	builder.WriteString(", ")
	builder.WriteString("campus=")
	builder.WriteString(fmt.Sprintf("%v", r.Campus))
	builder.WriteByte(')')
	return builder.String()
}

// Resturants is a parsable slice of Resturant.
type Resturants []*Resturant

func (r Resturants) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
