// Code generated by ent, DO NOT EDIT.

package lunchmenuitem

import (
	"fmt"
)

const (
	// Label holds the string label denoting the lunchmenuitem type in the database.
	Label = "lunch_menu_item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldBody holds the string denoting the body field in the database.
	FieldBody = "body"
	// FieldLanguage holds the string denoting the language field in the database.
	FieldLanguage = "language"
	// FieldPreformatted holds the string denoting the preformatted field in the database.
	FieldPreformatted = "preformatted"
	// FieldAllergens holds the string denoting the allergens field in the database.
	FieldAllergens = "allergens"
	// FieldEmission holds the string denoting the emission field in the database.
	FieldEmission = "emission"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// EdgeMenu holds the string denoting the menu edge name in mutations.
	EdgeMenu = "menu"
	// Table holds the table name of the lunchmenuitem in the database.
	Table = "lunch_menu_items"
	// MenuTable is the table that holds the menu relation/edge.
	MenuTable = "lunch_menu_items"
	// MenuInverseTable is the table name for the LunchMenu entity.
	// It exists in this package in order to avoid circular dependency with the "lunchmenu" package.
	MenuInverseTable = "lunch_menus"
	// MenuColumn is the table column denoting the menu relation/edge.
	MenuColumn = "lunch_menu_items"
)

// Columns holds all SQL columns for lunchmenuitem fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldBody,
	FieldLanguage,
	FieldPreformatted,
	FieldAllergens,
	FieldEmission,
	FieldPrice,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "lunch_menu_items"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"lunch_menu_items",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultPreformatted holds the default value on creation for the "preformatted" field.
	DefaultPreformatted bool
)

// Language defines the type for the "language" enum field.
type Language string

// Language values.
const (
	LanguageSe Language = "se"
	LanguageEn Language = "en"
)

func (l Language) String() string {
	return string(l)
}

// LanguageValidator is a validator for the "language" field enum values. It is called by the builders before save.
func LanguageValidator(l Language) error {
	switch l {
	case LanguageSe, LanguageEn:
		return nil
	default:
		return fmt.Errorf("lunchmenuitem: invalid enum value for language field: %q", l)
	}
}
